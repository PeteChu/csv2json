{"version":3,"sources":["components/TextInput.js","App.js","serviceWorker.js","index.js"],"names":["TextInput","props","className","styleName","placeholder","onChange","value","text","App","state","textInput1","textInput2","convertTo","_textInputHandler1","bind","_textInputHandler2","e","this","setState","target","_convertCSVToJSON","_convertJSONToCSV","csv","json","_IsValidCSV","data","trim","split","columnName","map","name","replace","slice","line","row","tmp","index","JSON","stringify","undefined","console","log","id","onClick","_convert","_clear","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPAaeA,G,MAXG,SAAAC,GAChB,OACE,8BACEC,UAAWD,EAAME,UACjBC,YAAaH,EAAMG,YACnBC,SAAUJ,EAAMI,SAChBC,MAAOL,EAAMM,SCwGJC,E,YA3Gb,WAAYP,GAAQ,IAAD,8BACjB,4CAAMA,KACDQ,MAAQ,CACXC,WAAY,GACZC,WAAY,GACZC,UAAW,QAEb,EAAKC,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,mBAAqB,EAAKA,mBAAmBD,KAAxB,gBART,E,gFAWAE,GACjBC,KAAKC,SAAS,CAAER,WAAYM,EAAEG,OAAOb,U,yCAGpBU,GACjBC,KAAKC,SAAS,CAAEP,WAAYK,EAAEG,OAAOb,U,iCAIrC,IAAMC,EAAOU,KAAKR,MAAMC,WAExB,OAAQO,KAAKR,MAAMG,WACjB,IAAK,OACHK,KAAKG,kBAAkBb,GACvB,MACF,IAAK,MACHU,KAAKI,kBAAkBd,GACvB,MACF,QACEU,KAAKG,kBAAkBb,M,+BAK3BU,KAAKC,SAAS,CAAER,WAAY,GAAIC,WAAY,O,wCAG5BW,GAEhB,IAAIC,EAAO,GACX,GAAIN,KAAKO,YAAYF,GAAM,CACzB,IAAIG,EAAOH,EAAII,OAAOC,MAAM,MACxBC,EAAaH,EAAK,GACnBE,MAAM,KACNE,KAAI,SAAAC,GAAI,OAAIA,EAAKJ,OAAOK,QAAQ,OAAQ,OAE3CR,EADcE,EAAKO,MAAM,GAAGH,KAAI,SAAAI,GAAI,OAAIA,EAAKN,MAAM,QACpCE,KAAI,SAAAK,GACjB,IAAIC,EAAM,GAIV,OAHAD,EAAIL,KAAI,SAACvB,EAAO8B,GACdD,EAAIP,EAAWQ,IAAU9B,EAAMoB,OAAOK,QAAQ,OAAQ,OAEjDI,KAGXlB,KAAKC,SAAS,CAAEP,WAAY0B,KAAKC,UAAUf,OAAMgB,EAAW,O,wCAG5ChB,GAEhBiB,QAAQC,IAAI,yB,oCAIZ,OAAO,I,qCAIP,OAAO,I,+BAIP,OACE,yBAAKvC,UAAU,OACb,wBAAIA,UAAU,SAAd,YACA,kBAAC,EAAD,CACEC,UAAU,sBACVC,YAAY,4BACZG,KAAMU,KAAKR,MAAMC,WACjBL,SAAUY,KAAKJ,qBAEjB,yBAAKX,UAAU,WACb,4BACEA,UAAU,eACVwC,GAAG,UACHC,QAAS1B,KAAK2B,SAAS9B,KAAKG,OAH9B,WAOA,4BACEf,UAAU,eACVwC,GAAG,QACHC,QAAS1B,KAAK4B,OAAO/B,KAAKG,OAH5B,UAQF,kBAAC,EAAD,CACEd,UAAU,sBACVI,KAAMU,KAAKR,MAAME,WACjBN,SAAUY,KAAKF,0B,GArGP+B,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5f72fe0a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TextInput = props => {\n  return (\n    <textarea\n      className={props.styleName}\n      placeholder={props.placeholder}\n      onChange={props.onChange}\n      value={props.text}\n    ></textarea>\n  );\n};\n\nexport default TextInput;\n","import React from \"react\";\nimport \"./App.css\";\nimport TextInput from \"./components/TextInput\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      textInput1: \"\",\n      textInput2: \"\",\n      convertTo: \"JSON\"\n    };\n    this._textInputHandler1 = this._textInputHandler1.bind(this);\n    this._textInputHandler2 = this._textInputHandler2.bind(this);\n  }\n\n  _textInputHandler1(e) {\n    this.setState({ textInput1: e.target.value });\n  }\n\n  _textInputHandler2(e) {\n    this.setState({ textInput2: e.target.value });\n  }\n\n  _convert() {\n    const text = this.state.textInput1;\n\n    switch (this.state.convertTo) {\n      case \"JSON\":\n        this._convertCSVToJSON(text);\n        break;\n      case \"CSV\":\n        this._convertJSONToCSV(text);\n        break;\n      default:\n        this._convertCSVToJSON(text);\n    }\n  }\n\n  _clear() {\n    this.setState({ textInput1: \"\", textInput2: \"\" });\n  }\n\n  _convertCSVToJSON(csv) {\n    // TODO Convert JSON to CSV\n    let json = [];\n    if (this._IsValidCSV(csv)) {\n      let data = csv.trim().split(\"\\n\");\n      let columnName = data[0]\n        .split(\",\")\n        .map(name => name.trim().replace(/[\"]/g, \"\"));\n      let csvData = data.slice(1).map(line => line.split(\",\"));\n      json = csvData.map(row => {\n        let tmp = {};\n        row.map((value, index) => {\n          tmp[columnName[index]] = value.trim().replace(/[\"]/g, \"\");\n        });\n        return tmp;\n      });\n    }\n    this.setState({ textInput2: JSON.stringify(json, undefined, 4) });\n  }\n\n  _convertJSONToCSV(json) {\n    // TODO Convert CSV to JSON\n    console.log(\"Convert JSON to CSV\");\n  }\n\n  _IsValidCSV() {\n    return true;\n  }\n\n  _IsValidJSON() {\n    return true;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"Title\">CSV2JSON</h1>\n        <TextInput\n          styleName=\"TextInput InputText\"\n          placeholder=\"Place your input here ...\"\n          text={this.state.textInput1}\n          onChange={this._textInputHandler1}\n        />\n        <div className=\"Actions\">\n          <button\n            className=\"ActionButton\"\n            id=\"convert\"\n            onClick={this._convert.bind(this)}\n          >\n            Convert\n          </button>\n          <button\n            className=\"ActionButton\"\n            id=\"clear\"\n            onClick={this._clear.bind(this)}\n          >\n            Clear\n          </button>\n        </div>\n        <TextInput\n          styleName=\"TextInput InputText\"\n          text={this.state.textInput2}\n          onChange={this._textInputHandler2}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}